MOVB AL, 120 ; AL <- 120
MOVB BL, 180 ; BL <- 180

; 8-bitno seštevanje
; ADDB AL, BL ; AL <- AL + BL
; HLT

; 16-bitno seštevanje
ADD A, B ; A <- A + B
HLT

-------------------------------------------------------
MOVB AH, 5 ; X = 5
MOVB AL, 7 ; Y = 7

; 8-bitna verzija
; MOVB BL, AL
; MOVB BH, 0
; MOVB AL, AH
; MOVB AH, 0
; HLT

; 16-bitna verzija
MOV B, A
AND B, 0x00ff ; je enako 0000000011111111
SHR A, 8
HLT

-------------------------------------------------------
MOV D, 100
MOV A, [D]
HLT

-------------------------------------------------------
MOV [0x0100], 0xabcd
MOVB [0x0102], 0x33

MOVB AL, [0x0102]
MOVB AH, 0 ; Pretvorba v  16-bitov
ADD A, [0x0100]

MOV [0x0100], A ; Shranimo nazaj na naslov 0x100
HLT

-------------------------------------------------------
JMP main

; Definicija spremenljivk
x: DW 0xabcd 

main:
; x = x + 3
  MOV A, [x]
  ADD A, 3
  MOV [x], A
  HLT

-------------------------------------------------------
JMP main

x: DW 2
y: DW 3
z: DW 2

main:
	MOV A, [z] ; A = z
  MUL 3 ; A = 3z
  MOV B, [x] ; B = x
  ADD B, [y] ; B = x + y
  SHR B, 1 ; B = (x + y)/2
  SUB A, B ; A = A - B
  MOV [z], A ; z = A
	HLT
    
-------------------------------------------------------

JMP main

x: DW 7 
y: DW 7

main:
	MOV A, [x]
  SUB A, [y]
  HLT

-------------------------------------------------------
JMP main

x: DW 5 
y: DW 7

main:
	; if (x < y) x = x + 1
  MOV A, [x]
  CMP A, [y]
  JB incx
  JMP continue
incx:
	MOV A, [x]
  INC A ; poveca za 1
  MOV [x], A
    
continue:
  ; program lahko nadaljujemo
HLT

-------------------------------------------------------
; if (x < y) z = y
; else z = x
; Ugotovitev: z = max(x,y)

JMP main

x: DW 5 
y: DW 7
z: DW 0

main:
    MOV A, [x]
    CMP A, [y] ; x-y primerja
    JB sety ; if (x < y) jump sety
    MOV A, [x] ; else
    MOV [z], A ; z = x
    JMP continue
sety:
	; z = y
	MOV A, [y]
  MOV [z], A
    
continue:
    ; program lahko nadaljujemo
    
	HLT

-------------------------------------------------------
; if (x >= 100 && x < 200)
; x = x / 2

JMP main

x: DW 250

main:
	MOV A, [x]
	CMP A, 100 ; A >= 100 ?
	JAE check2
  JMP continue
    
check2:
	CMP A, 200
  JB ifbody
  JMP continue
    
ifbody:
  SHR A, 1 ; a <- a / 2
	MOV [x], A

continue:
	HLT

-------------------------------------------------------
; if (x >= 100 && x < 200)
; x = x / 2

; if (x < 100 || x >= 200) {
;	// preskoci telo if stavka
; } else {
;	x = x / 2
; }

JMP main

x: DW 150

main:
	MOV A, [x]
	CMP A, 100 ; A < 100 ?
	JB continue
  CMP A, 200 ; A >= 200 ?
  JAE continue
  SHR A, 1 ; A <- A / 2
  MOV [x], A ; x = x / 2
    
continue:
	HLT
-------------------------------------------------------