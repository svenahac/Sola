JMP main
JMP isr

start: DB "Izberi operacijo a s m d        "
prvo: DB "Vnesi prvo stevilo"
drugo: DB "Vnesi drugo stevilo"

isr:
	PUSH A
    IN 5 ; preberemo KBDSTATUS
    CMP A, 1 ; Ali je keydown?
    JNE keyup ; če ni, skoči na keyup
    MOVB BL, 1 ; Eno od štirih tipk bom nastavil na true
    JMP setkey

keyup:
	MOVB BL, 0 ; Pritisnjeno tipko bom nastavil na false
setkey:
	IN 6 ; Katera tipka je bila pritisnjena?
    CMPB AL, '8' ; Ali je bila 8?
    JNE check2 ; Če ne preveri tipko 2
;    MOVB [gor], BL ; spremenim  stanje tipke gor
    JMP done
check2:
	CMPB AL, '2'
    JNE check4
    MOV C, prvo
    CALL print_prvo
    JMP done
    
check4:
	CMPB AL, '4'
    JNE check6
  ;  MOVB [levo], BL
    JMP done
    
check6:
	CMPB AL, '6'
    JNE done
   ; MOVB [desno], BL
    
done:
	MOV A, 1 ; Umaknemo zahtevo po prekinitvi
    OUT 2
	IRET

main:
	MOV SP, 0x0FFF ; Inicializacija sklada
    MOV A, 1 ; Maska za prekinitve tipkovnice
    OUT 0 ; Omogočimo prekinitve tipkovnici
    STI ; Omogočimo prekinitve globalno
    MOV C, start
    MOV D, 0x1000
    CALL print_start

    HLT

print_start:
	PUSH A
loop:
	MOVB AL, [C]
    MOVB [D], AL
    INC C
    INC D
    CMPB BL, [C]
    JNE loop
    
    POP A
    RET

print_prvo:
	PUSH A
    PUSH B
    MOV B, 0
loop2:
	MOVB AL, [C]
    MOVB [D], AL
    INC C
    INC D
    CMPB BL, [C]
    JNE loop2
    
    POP B
    POP A
    RET

-----------------------------------------------
JMP main
JMP isr

quit: DW 0 ; quit = false

isr:
    PUSH A ; The ISR will use register A .
    MOVB AL , [0x1000] ; Get the currently displayed character .
    INCB AL ; Increase its ASCII value .
    MOVB [0x1000] , AL ; Print out the new value .
    CMPB AL , '9' ; Check if ’9 ’ has been reached .
    JNE timerdone ; If not , we are done .
    MOV [quit] , 1 ; Otherwise set quit to true .

timerdone:
    MOV A , 2 ; Timer interrupt mask .
    OUT 2 ; Timer has been serviced .
    POP A ; Restore the register A .
    IRET ; Return from ISR .

main:
    MOV SP , 0x0FFF ; Initialize the stack pointer .
    MOVB [0x1000] , '0' ; Display ’0 ’ on display .
    MOV A , 5000 ; 1 second = 5000 clock cycles .
    OUT 3 ; Preset the timer to 5000.
    MOV A , 2 ; Timer interrupt mask .
    OUT 0 ; Set the mask .
    STI ; Enable interrupts .
loop:
    MOV A , [quit] ; Read the global quit variable .
    CMP A , 1 ; Check it ’ s value .
    JE break ; If true , break the loop .
    JMP loop ; Otherwise , read the value again .
break:
	CLI ; Disable interrupts .
    HLT