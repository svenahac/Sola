(* 1. domača naloga *)

(* seperacija števil *)
let prime_separator lst =
  let rec is_prime n =
    let rec aux k = match k with
      |_ when k*k > n || n < 3 -> true
      |_ when n mod k = 0 -> false
      | _ -> aux (k+1)
    in (aux 2) in
  let is_comp n = not (is_prime n) in
  List.filter is_prime lst, List.filter is_comp lst;;

let lst = [1;2;3;4;5;6;7;8;9;10;11];;

prime_separator lst;;



(* pascalov trikotnik *)
let nextpascalrow row =
  let rec nextrow lprevious lnew = match (lprevious, lnew) with
    | ([],_) -> lnew
    | (h1::t1,[]) -> nextrow t1 [h1;h1]
    | (h1::t1,h2::t2) -> nextrow t1 (h1::h1+h2::t2) in
  nextrow row [];;

let row = [1;4;6;4;1];;
nextpascalrow row;;



(* razlika seznamov *)
let listdiff l1 l2 = 
  List.filter (fun x -> (List.for_all (fun y -> y != x) l2)) l1;;

----------------------------------------------------------------------

(* kartezični map *)
let cart_fun f l1 l2 = 
  let lst = List.map (fun x -> List.map (fun y -> f x y)l2) l1 in
  List.fold_right (@) lst [];;